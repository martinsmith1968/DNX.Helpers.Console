// Code generated by a Template
using System;
using System.Collections.Generic;
using System.Linq;
using CommandLine;
using DNX.Helpers.Console.CommandLine.Results;

namespace DNX.Helpers.Console.CommandLine
{
    /// <summary>
    /// Class ParserManager.
    /// </summary>
    public static class ParserHelper
    {
        internal static Parser GetCustomisedParser(params Action<ParserSettings>[] customisers)
        {
			return GetCustomisedParser(customisers.ToList());
		}

		internal static Parser GetCustomisedParser(IList<Action<ParserSettings>> customisers)
		{
            var customiserList = new List<Action<ParserSettings>>
            {
                ParserSettingsHelper.DefaultParserCustomiser
            };

            customisers
                .Where(c => c != null)
                .ToList()
                .ForEach(c => customiserList.Add(c))
                ;

            var customiserChain = ParserSettingsChain.Create(customiserList);

            return new Parser(customiserChain);
        }

        /// <summary>
        /// Gets the default parser.
        /// </summary>
        /// <value>The default parser.</value>
        public static Parser DefaultParser
        {
            get
            {
                return GetCustomisedParser();
            }
        }

        /// <summary>
        /// Gets a parser for the specified Arguments type
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <returns>Parser.</returns>
        public static Parser GetParser<T>()
            where T : new()
        {
            return GetCustomisedParser(ParserSettingsHelper.GetSettingsCustomiser<T>());
        }

        /// <summary>
        /// Gets a parser for the specified Arguments type and parses
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="args">The arguments.</param>
        /// <returns>CommandLine.ParserResult&lt;T&gt;.</returns>
        public static IExtendedParserResult<T> GetParserAndParse<T>(string[] args)
            where T : new()
        {
            var parser = GetParser<T>();

            return parser.ParseAndValidate<T>(args);
        }


        /// <summary>
        /// Gets a parser for the specified Command types
        /// </summary>
        /// <typeparam name="T1">The type of the T1.</typeparam>
        /// <typeparam name="T2">The type of the T2.</typeparam>
        /// <returns>CommandLine.ParserResult&lt;System.Object&gt;.</returns>
        public static Parser GetParser<T1, T2>()
            where T1 : new()
            where T2 : new()
        {
            return GetCustomisedParser(
                 ParserSettingsHelper.GetSettingsCustomiser<T1>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T2>()
                );
        }

        /// <summary>
        /// Gets a parser for the specified Command types and parses
        /// </summary>
        /// <typeparam name="T1">The type of the T1.</typeparam>
        /// <typeparam name="T2">The type of the T2.</typeparam>
        public static IExtendedParserResult<object> GetParserAndParse<T1, T2>(string[] args)
            where T1 : new()
            where T2 : new()
        {
            return GetParser<T1, T2>()
                .ParseAndValidate<T1, T2>(args);
        }

        /// <summary>
        /// Gets a parser for the specified Command types
        /// </summary>
        /// <typeparam name="T1">The type of the T1.</typeparam>
        /// <typeparam name="T2">The type of the T2.</typeparam>
        /// <typeparam name="T3">The type of the T3.</typeparam>
        /// <returns>CommandLine.ParserResult&lt;System.Object&gt;.</returns>
        public static Parser GetParser<T1, T2, T3>()
            where T1 : new()
            where T2 : new()
            where T3 : new()
        {
            return GetCustomisedParser(
                 ParserSettingsHelper.GetSettingsCustomiser<T1>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T2>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T3>()
                );
        }

        /// <summary>
        /// Gets a parser for the specified Command types and parses
        /// </summary>
        /// <typeparam name="T1">The type of the T1.</typeparam>
        /// <typeparam name="T2">The type of the T2.</typeparam>
        /// <typeparam name="T3">The type of the T3.</typeparam>
        public static IExtendedParserResult<object> GetParserAndParse<T1, T2, T3>(string[] args)
            where T1 : new()
            where T2 : new()
            where T3 : new()
        {
            return GetParser<T1, T2, T3>()
                .ParseAndValidate<T1, T2, T3>(args);
        }

        /// <summary>
        /// Gets a parser for the specified Command types
        /// </summary>
        /// <typeparam name="T1">The type of the T1.</typeparam>
        /// <typeparam name="T2">The type of the T2.</typeparam>
        /// <typeparam name="T3">The type of the T3.</typeparam>
        /// <typeparam name="T4">The type of the T4.</typeparam>
        /// <returns>CommandLine.ParserResult&lt;System.Object&gt;.</returns>
        public static Parser GetParser<T1, T2, T3, T4>()
            where T1 : new()
            where T2 : new()
            where T3 : new()
            where T4 : new()
        {
            return GetCustomisedParser(
                 ParserSettingsHelper.GetSettingsCustomiser<T1>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T2>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T3>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T4>()
                );
        }

        /// <summary>
        /// Gets a parser for the specified Command types and parses
        /// </summary>
        /// <typeparam name="T1">The type of the T1.</typeparam>
        /// <typeparam name="T2">The type of the T2.</typeparam>
        /// <typeparam name="T3">The type of the T3.</typeparam>
        /// <typeparam name="T4">The type of the T4.</typeparam>
        public static IExtendedParserResult<object> GetParserAndParse<T1, T2, T3, T4>(string[] args)
            where T1 : new()
            where T2 : new()
            where T3 : new()
            where T4 : new()
        {
            return GetParser<T1, T2, T3, T4>()
                .ParseAndValidate<T1, T2, T3, T4>(args);
        }

        /// <summary>
        /// Gets a parser for the specified Command types
        /// </summary>
        /// <typeparam name="T1">The type of the T1.</typeparam>
        /// <typeparam name="T2">The type of the T2.</typeparam>
        /// <typeparam name="T3">The type of the T3.</typeparam>
        /// <typeparam name="T4">The type of the T4.</typeparam>
        /// <typeparam name="T5">The type of the T5.</typeparam>
        /// <returns>CommandLine.ParserResult&lt;System.Object&gt;.</returns>
        public static Parser GetParser<T1, T2, T3, T4, T5>()
            where T1 : new()
            where T2 : new()
            where T3 : new()
            where T4 : new()
            where T5 : new()
        {
            return GetCustomisedParser(
                 ParserSettingsHelper.GetSettingsCustomiser<T1>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T2>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T3>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T4>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T5>()
                );
        }

        /// <summary>
        /// Gets a parser for the specified Command types and parses
        /// </summary>
        /// <typeparam name="T1">The type of the T1.</typeparam>
        /// <typeparam name="T2">The type of the T2.</typeparam>
        /// <typeparam name="T3">The type of the T3.</typeparam>
        /// <typeparam name="T4">The type of the T4.</typeparam>
        /// <typeparam name="T5">The type of the T5.</typeparam>
        public static IExtendedParserResult<object> GetParserAndParse<T1, T2, T3, T4, T5>(string[] args)
            where T1 : new()
            where T2 : new()
            where T3 : new()
            where T4 : new()
            where T5 : new()
        {
            return GetParser<T1, T2, T3, T4, T5>()
                .ParseAndValidate<T1, T2, T3, T4, T5>(args);
        }

        /// <summary>
        /// Gets a parser for the specified Command types
        /// </summary>
        /// <typeparam name="T1">The type of the T1.</typeparam>
        /// <typeparam name="T2">The type of the T2.</typeparam>
        /// <typeparam name="T3">The type of the T3.</typeparam>
        /// <typeparam name="T4">The type of the T4.</typeparam>
        /// <typeparam name="T5">The type of the T5.</typeparam>
        /// <typeparam name="T6">The type of the T6.</typeparam>
        /// <returns>CommandLine.ParserResult&lt;System.Object&gt;.</returns>
        public static Parser GetParser<T1, T2, T3, T4, T5, T6>()
            where T1 : new()
            where T2 : new()
            where T3 : new()
            where T4 : new()
            where T5 : new()
            where T6 : new()
        {
            return GetCustomisedParser(
                 ParserSettingsHelper.GetSettingsCustomiser<T1>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T2>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T3>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T4>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T5>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T6>()
                );
        }

        /// <summary>
        /// Gets a parser for the specified Command types and parses
        /// </summary>
        /// <typeparam name="T1">The type of the T1.</typeparam>
        /// <typeparam name="T2">The type of the T2.</typeparam>
        /// <typeparam name="T3">The type of the T3.</typeparam>
        /// <typeparam name="T4">The type of the T4.</typeparam>
        /// <typeparam name="T5">The type of the T5.</typeparam>
        /// <typeparam name="T6">The type of the T6.</typeparam>
        public static IExtendedParserResult<object> GetParserAndParse<T1, T2, T3, T4, T5, T6>(string[] args)
            where T1 : new()
            where T2 : new()
            where T3 : new()
            where T4 : new()
            where T5 : new()
            where T6 : new()
        {
            return GetParser<T1, T2, T3, T4, T5, T6>()
                .ParseAndValidate<T1, T2, T3, T4, T5, T6>(args);
        }

        /// <summary>
        /// Gets a parser for the specified Command types
        /// </summary>
        /// <typeparam name="T1">The type of the T1.</typeparam>
        /// <typeparam name="T2">The type of the T2.</typeparam>
        /// <typeparam name="T3">The type of the T3.</typeparam>
        /// <typeparam name="T4">The type of the T4.</typeparam>
        /// <typeparam name="T5">The type of the T5.</typeparam>
        /// <typeparam name="T6">The type of the T6.</typeparam>
        /// <typeparam name="T7">The type of the T7.</typeparam>
        /// <returns>CommandLine.ParserResult&lt;System.Object&gt;.</returns>
        public static Parser GetParser<T1, T2, T3, T4, T5, T6, T7>()
            where T1 : new()
            where T2 : new()
            where T3 : new()
            where T4 : new()
            where T5 : new()
            where T6 : new()
            where T7 : new()
        {
            return GetCustomisedParser(
                 ParserSettingsHelper.GetSettingsCustomiser<T1>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T2>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T3>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T4>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T5>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T6>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T7>()
                );
        }

        /// <summary>
        /// Gets a parser for the specified Command types and parses
        /// </summary>
        /// <typeparam name="T1">The type of the T1.</typeparam>
        /// <typeparam name="T2">The type of the T2.</typeparam>
        /// <typeparam name="T3">The type of the T3.</typeparam>
        /// <typeparam name="T4">The type of the T4.</typeparam>
        /// <typeparam name="T5">The type of the T5.</typeparam>
        /// <typeparam name="T6">The type of the T6.</typeparam>
        /// <typeparam name="T7">The type of the T7.</typeparam>
        public static IExtendedParserResult<object> GetParserAndParse<T1, T2, T3, T4, T5, T6, T7>(string[] args)
            where T1 : new()
            where T2 : new()
            where T3 : new()
            where T4 : new()
            where T5 : new()
            where T6 : new()
            where T7 : new()
        {
            return GetParser<T1, T2, T3, T4, T5, T6, T7>()
                .ParseAndValidate<T1, T2, T3, T4, T5, T6, T7>(args);
        }

        /// <summary>
        /// Gets a parser for the specified Command types
        /// </summary>
        /// <typeparam name="T1">The type of the T1.</typeparam>
        /// <typeparam name="T2">The type of the T2.</typeparam>
        /// <typeparam name="T3">The type of the T3.</typeparam>
        /// <typeparam name="T4">The type of the T4.</typeparam>
        /// <typeparam name="T5">The type of the T5.</typeparam>
        /// <typeparam name="T6">The type of the T6.</typeparam>
        /// <typeparam name="T7">The type of the T7.</typeparam>
        /// <typeparam name="T8">The type of the T8.</typeparam>
        /// <returns>CommandLine.ParserResult&lt;System.Object&gt;.</returns>
        public static Parser GetParser<T1, T2, T3, T4, T5, T6, T7, T8>()
            where T1 : new()
            where T2 : new()
            where T3 : new()
            where T4 : new()
            where T5 : new()
            where T6 : new()
            where T7 : new()
            where T8 : new()
        {
            return GetCustomisedParser(
                 ParserSettingsHelper.GetSettingsCustomiser<T1>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T2>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T3>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T4>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T5>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T6>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T7>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T8>()
                );
        }

        /// <summary>
        /// Gets a parser for the specified Command types and parses
        /// </summary>
        /// <typeparam name="T1">The type of the T1.</typeparam>
        /// <typeparam name="T2">The type of the T2.</typeparam>
        /// <typeparam name="T3">The type of the T3.</typeparam>
        /// <typeparam name="T4">The type of the T4.</typeparam>
        /// <typeparam name="T5">The type of the T5.</typeparam>
        /// <typeparam name="T6">The type of the T6.</typeparam>
        /// <typeparam name="T7">The type of the T7.</typeparam>
        /// <typeparam name="T8">The type of the T8.</typeparam>
        public static IExtendedParserResult<object> GetParserAndParse<T1, T2, T3, T4, T5, T6, T7, T8>(string[] args)
            where T1 : new()
            where T2 : new()
            where T3 : new()
            where T4 : new()
            where T5 : new()
            where T6 : new()
            where T7 : new()
            where T8 : new()
        {
            return GetParser<T1, T2, T3, T4, T5, T6, T7, T8>()
                .ParseAndValidate<T1, T2, T3, T4, T5, T6, T7, T8>(args);
        }

        /// <summary>
        /// Gets a parser for the specified Command types
        /// </summary>
        /// <typeparam name="T1">The type of the T1.</typeparam>
        /// <typeparam name="T2">The type of the T2.</typeparam>
        /// <typeparam name="T3">The type of the T3.</typeparam>
        /// <typeparam name="T4">The type of the T4.</typeparam>
        /// <typeparam name="T5">The type of the T5.</typeparam>
        /// <typeparam name="T6">The type of the T6.</typeparam>
        /// <typeparam name="T7">The type of the T7.</typeparam>
        /// <typeparam name="T8">The type of the T8.</typeparam>
        /// <typeparam name="T9">The type of the T9.</typeparam>
        /// <returns>CommandLine.ParserResult&lt;System.Object&gt;.</returns>
        public static Parser GetParser<T1, T2, T3, T4, T5, T6, T7, T8, T9>()
            where T1 : new()
            where T2 : new()
            where T3 : new()
            where T4 : new()
            where T5 : new()
            where T6 : new()
            where T7 : new()
            where T8 : new()
            where T9 : new()
        {
            return GetCustomisedParser(
                 ParserSettingsHelper.GetSettingsCustomiser<T1>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T2>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T3>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T4>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T5>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T6>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T7>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T8>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T9>()
                );
        }

        /// <summary>
        /// Gets a parser for the specified Command types and parses
        /// </summary>
        /// <typeparam name="T1">The type of the T1.</typeparam>
        /// <typeparam name="T2">The type of the T2.</typeparam>
        /// <typeparam name="T3">The type of the T3.</typeparam>
        /// <typeparam name="T4">The type of the T4.</typeparam>
        /// <typeparam name="T5">The type of the T5.</typeparam>
        /// <typeparam name="T6">The type of the T6.</typeparam>
        /// <typeparam name="T7">The type of the T7.</typeparam>
        /// <typeparam name="T8">The type of the T8.</typeparam>
        /// <typeparam name="T9">The type of the T9.</typeparam>
        public static IExtendedParserResult<object> GetParserAndParse<T1, T2, T3, T4, T5, T6, T7, T8, T9>(string[] args)
            where T1 : new()
            where T2 : new()
            where T3 : new()
            where T4 : new()
            where T5 : new()
            where T6 : new()
            where T7 : new()
            where T8 : new()
            where T9 : new()
        {
            return GetParser<T1, T2, T3, T4, T5, T6, T7, T8, T9>()
                .ParseAndValidate<T1, T2, T3, T4, T5, T6, T7, T8, T9>(args);
        }

        /// <summary>
        /// Gets a parser for the specified Command types
        /// </summary>
        /// <typeparam name="T1">The type of the T1.</typeparam>
        /// <typeparam name="T2">The type of the T2.</typeparam>
        /// <typeparam name="T3">The type of the T3.</typeparam>
        /// <typeparam name="T4">The type of the T4.</typeparam>
        /// <typeparam name="T5">The type of the T5.</typeparam>
        /// <typeparam name="T6">The type of the T6.</typeparam>
        /// <typeparam name="T7">The type of the T7.</typeparam>
        /// <typeparam name="T8">The type of the T8.</typeparam>
        /// <typeparam name="T9">The type of the T9.</typeparam>
        /// <typeparam name="T10">The type of the T10.</typeparam>
        /// <returns>CommandLine.ParserResult&lt;System.Object&gt;.</returns>
        public static Parser GetParser<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>()
            where T1 : new()
            where T2 : new()
            where T3 : new()
            where T4 : new()
            where T5 : new()
            where T6 : new()
            where T7 : new()
            where T8 : new()
            where T9 : new()
            where T10 : new()
        {
            return GetCustomisedParser(
                 ParserSettingsHelper.GetSettingsCustomiser<T1>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T2>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T3>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T4>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T5>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T6>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T7>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T8>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T9>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T10>()
                );
        }

        /// <summary>
        /// Gets a parser for the specified Command types and parses
        /// </summary>
        /// <typeparam name="T1">The type of the T1.</typeparam>
        /// <typeparam name="T2">The type of the T2.</typeparam>
        /// <typeparam name="T3">The type of the T3.</typeparam>
        /// <typeparam name="T4">The type of the T4.</typeparam>
        /// <typeparam name="T5">The type of the T5.</typeparam>
        /// <typeparam name="T6">The type of the T6.</typeparam>
        /// <typeparam name="T7">The type of the T7.</typeparam>
        /// <typeparam name="T8">The type of the T8.</typeparam>
        /// <typeparam name="T9">The type of the T9.</typeparam>
        /// <typeparam name="T10">The type of the T10.</typeparam>
        public static IExtendedParserResult<object> GetParserAndParse<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(string[] args)
            where T1 : new()
            where T2 : new()
            where T3 : new()
            where T4 : new()
            where T5 : new()
            where T6 : new()
            where T7 : new()
            where T8 : new()
            where T9 : new()
            where T10 : new()
        {
            return GetParser<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>()
                .ParseAndValidate<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(args);
        }

        /// <summary>
        /// Gets a parser for the specified Command types
        /// </summary>
        /// <typeparam name="T1">The type of the T1.</typeparam>
        /// <typeparam name="T2">The type of the T2.</typeparam>
        /// <typeparam name="T3">The type of the T3.</typeparam>
        /// <typeparam name="T4">The type of the T4.</typeparam>
        /// <typeparam name="T5">The type of the T5.</typeparam>
        /// <typeparam name="T6">The type of the T6.</typeparam>
        /// <typeparam name="T7">The type of the T7.</typeparam>
        /// <typeparam name="T8">The type of the T8.</typeparam>
        /// <typeparam name="T9">The type of the T9.</typeparam>
        /// <typeparam name="T10">The type of the T10.</typeparam>
        /// <typeparam name="T11">The type of the T11.</typeparam>
        /// <returns>CommandLine.ParserResult&lt;System.Object&gt;.</returns>
        public static Parser GetParser<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>()
            where T1 : new()
            where T2 : new()
            where T3 : new()
            where T4 : new()
            where T5 : new()
            where T6 : new()
            where T7 : new()
            where T8 : new()
            where T9 : new()
            where T10 : new()
            where T11 : new()
        {
            return GetCustomisedParser(
                 ParserSettingsHelper.GetSettingsCustomiser<T1>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T2>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T3>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T4>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T5>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T6>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T7>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T8>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T9>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T10>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T11>()
                );
        }

        /// <summary>
        /// Gets a parser for the specified Command types and parses
        /// </summary>
        /// <typeparam name="T1">The type of the T1.</typeparam>
        /// <typeparam name="T2">The type of the T2.</typeparam>
        /// <typeparam name="T3">The type of the T3.</typeparam>
        /// <typeparam name="T4">The type of the T4.</typeparam>
        /// <typeparam name="T5">The type of the T5.</typeparam>
        /// <typeparam name="T6">The type of the T6.</typeparam>
        /// <typeparam name="T7">The type of the T7.</typeparam>
        /// <typeparam name="T8">The type of the T8.</typeparam>
        /// <typeparam name="T9">The type of the T9.</typeparam>
        /// <typeparam name="T10">The type of the T10.</typeparam>
        /// <typeparam name="T11">The type of the T11.</typeparam>
        public static IExtendedParserResult<object> GetParserAndParse<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(string[] args)
            where T1 : new()
            where T2 : new()
            where T3 : new()
            where T4 : new()
            where T5 : new()
            where T6 : new()
            where T7 : new()
            where T8 : new()
            where T9 : new()
            where T10 : new()
            where T11 : new()
        {
            return GetParser<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>()
                .ParseAndValidate<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(args);
        }

        /// <summary>
        /// Gets a parser for the specified Command types
        /// </summary>
        /// <typeparam name="T1">The type of the T1.</typeparam>
        /// <typeparam name="T2">The type of the T2.</typeparam>
        /// <typeparam name="T3">The type of the T3.</typeparam>
        /// <typeparam name="T4">The type of the T4.</typeparam>
        /// <typeparam name="T5">The type of the T5.</typeparam>
        /// <typeparam name="T6">The type of the T6.</typeparam>
        /// <typeparam name="T7">The type of the T7.</typeparam>
        /// <typeparam name="T8">The type of the T8.</typeparam>
        /// <typeparam name="T9">The type of the T9.</typeparam>
        /// <typeparam name="T10">The type of the T10.</typeparam>
        /// <typeparam name="T11">The type of the T11.</typeparam>
        /// <typeparam name="T12">The type of the T12.</typeparam>
        /// <returns>CommandLine.ParserResult&lt;System.Object&gt;.</returns>
        public static Parser GetParser<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>()
            where T1 : new()
            where T2 : new()
            where T3 : new()
            where T4 : new()
            where T5 : new()
            where T6 : new()
            where T7 : new()
            where T8 : new()
            where T9 : new()
            where T10 : new()
            where T11 : new()
            where T12 : new()
        {
            return GetCustomisedParser(
                 ParserSettingsHelper.GetSettingsCustomiser<T1>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T2>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T3>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T4>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T5>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T6>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T7>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T8>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T9>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T10>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T11>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T12>()
                );
        }

        /// <summary>
        /// Gets a parser for the specified Command types and parses
        /// </summary>
        /// <typeparam name="T1">The type of the T1.</typeparam>
        /// <typeparam name="T2">The type of the T2.</typeparam>
        /// <typeparam name="T3">The type of the T3.</typeparam>
        /// <typeparam name="T4">The type of the T4.</typeparam>
        /// <typeparam name="T5">The type of the T5.</typeparam>
        /// <typeparam name="T6">The type of the T6.</typeparam>
        /// <typeparam name="T7">The type of the T7.</typeparam>
        /// <typeparam name="T8">The type of the T8.</typeparam>
        /// <typeparam name="T9">The type of the T9.</typeparam>
        /// <typeparam name="T10">The type of the T10.</typeparam>
        /// <typeparam name="T11">The type of the T11.</typeparam>
        /// <typeparam name="T12">The type of the T12.</typeparam>
        public static IExtendedParserResult<object> GetParserAndParse<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(string[] args)
            where T1 : new()
            where T2 : new()
            where T3 : new()
            where T4 : new()
            where T5 : new()
            where T6 : new()
            where T7 : new()
            where T8 : new()
            where T9 : new()
            where T10 : new()
            where T11 : new()
            where T12 : new()
        {
            return GetParser<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>()
                .ParseAndValidate<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(args);
        }

        /// <summary>
        /// Gets a parser for the specified Command types
        /// </summary>
        /// <typeparam name="T1">The type of the T1.</typeparam>
        /// <typeparam name="T2">The type of the T2.</typeparam>
        /// <typeparam name="T3">The type of the T3.</typeparam>
        /// <typeparam name="T4">The type of the T4.</typeparam>
        /// <typeparam name="T5">The type of the T5.</typeparam>
        /// <typeparam name="T6">The type of the T6.</typeparam>
        /// <typeparam name="T7">The type of the T7.</typeparam>
        /// <typeparam name="T8">The type of the T8.</typeparam>
        /// <typeparam name="T9">The type of the T9.</typeparam>
        /// <typeparam name="T10">The type of the T10.</typeparam>
        /// <typeparam name="T11">The type of the T11.</typeparam>
        /// <typeparam name="T12">The type of the T12.</typeparam>
        /// <typeparam name="T13">The type of the T13.</typeparam>
        /// <returns>CommandLine.ParserResult&lt;System.Object&gt;.</returns>
        public static Parser GetParser<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>()
            where T1 : new()
            where T2 : new()
            where T3 : new()
            where T4 : new()
            where T5 : new()
            where T6 : new()
            where T7 : new()
            where T8 : new()
            where T9 : new()
            where T10 : new()
            where T11 : new()
            where T12 : new()
            where T13 : new()
        {
            return GetCustomisedParser(
                 ParserSettingsHelper.GetSettingsCustomiser<T1>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T2>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T3>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T4>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T5>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T6>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T7>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T8>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T9>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T10>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T11>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T12>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T13>()
                );
        }

        /// <summary>
        /// Gets a parser for the specified Command types and parses
        /// </summary>
        /// <typeparam name="T1">The type of the T1.</typeparam>
        /// <typeparam name="T2">The type of the T2.</typeparam>
        /// <typeparam name="T3">The type of the T3.</typeparam>
        /// <typeparam name="T4">The type of the T4.</typeparam>
        /// <typeparam name="T5">The type of the T5.</typeparam>
        /// <typeparam name="T6">The type of the T6.</typeparam>
        /// <typeparam name="T7">The type of the T7.</typeparam>
        /// <typeparam name="T8">The type of the T8.</typeparam>
        /// <typeparam name="T9">The type of the T9.</typeparam>
        /// <typeparam name="T10">The type of the T10.</typeparam>
        /// <typeparam name="T11">The type of the T11.</typeparam>
        /// <typeparam name="T12">The type of the T12.</typeparam>
        /// <typeparam name="T13">The type of the T13.</typeparam>
        public static IExtendedParserResult<object> GetParserAndParse<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(string[] args)
            where T1 : new()
            where T2 : new()
            where T3 : new()
            where T4 : new()
            where T5 : new()
            where T6 : new()
            where T7 : new()
            where T8 : new()
            where T9 : new()
            where T10 : new()
            where T11 : new()
            where T12 : new()
            where T13 : new()
        {
            return GetParser<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>()
                .ParseAndValidate<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(args);
        }

        /// <summary>
        /// Gets a parser for the specified Command types
        /// </summary>
        /// <typeparam name="T1">The type of the T1.</typeparam>
        /// <typeparam name="T2">The type of the T2.</typeparam>
        /// <typeparam name="T3">The type of the T3.</typeparam>
        /// <typeparam name="T4">The type of the T4.</typeparam>
        /// <typeparam name="T5">The type of the T5.</typeparam>
        /// <typeparam name="T6">The type of the T6.</typeparam>
        /// <typeparam name="T7">The type of the T7.</typeparam>
        /// <typeparam name="T8">The type of the T8.</typeparam>
        /// <typeparam name="T9">The type of the T9.</typeparam>
        /// <typeparam name="T10">The type of the T10.</typeparam>
        /// <typeparam name="T11">The type of the T11.</typeparam>
        /// <typeparam name="T12">The type of the T12.</typeparam>
        /// <typeparam name="T13">The type of the T13.</typeparam>
        /// <typeparam name="T14">The type of the T14.</typeparam>
        /// <returns>CommandLine.ParserResult&lt;System.Object&gt;.</returns>
        public static Parser GetParser<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>()
            where T1 : new()
            where T2 : new()
            where T3 : new()
            where T4 : new()
            where T5 : new()
            where T6 : new()
            where T7 : new()
            where T8 : new()
            where T9 : new()
            where T10 : new()
            where T11 : new()
            where T12 : new()
            where T13 : new()
            where T14 : new()
        {
            return GetCustomisedParser(
                 ParserSettingsHelper.GetSettingsCustomiser<T1>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T2>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T3>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T4>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T5>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T6>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T7>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T8>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T9>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T10>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T11>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T12>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T13>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T14>()
                );
        }

        /// <summary>
        /// Gets a parser for the specified Command types and parses
        /// </summary>
        /// <typeparam name="T1">The type of the T1.</typeparam>
        /// <typeparam name="T2">The type of the T2.</typeparam>
        /// <typeparam name="T3">The type of the T3.</typeparam>
        /// <typeparam name="T4">The type of the T4.</typeparam>
        /// <typeparam name="T5">The type of the T5.</typeparam>
        /// <typeparam name="T6">The type of the T6.</typeparam>
        /// <typeparam name="T7">The type of the T7.</typeparam>
        /// <typeparam name="T8">The type of the T8.</typeparam>
        /// <typeparam name="T9">The type of the T9.</typeparam>
        /// <typeparam name="T10">The type of the T10.</typeparam>
        /// <typeparam name="T11">The type of the T11.</typeparam>
        /// <typeparam name="T12">The type of the T12.</typeparam>
        /// <typeparam name="T13">The type of the T13.</typeparam>
        /// <typeparam name="T14">The type of the T14.</typeparam>
        public static IExtendedParserResult<object> GetParserAndParse<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(string[] args)
            where T1 : new()
            where T2 : new()
            where T3 : new()
            where T4 : new()
            where T5 : new()
            where T6 : new()
            where T7 : new()
            where T8 : new()
            where T9 : new()
            where T10 : new()
            where T11 : new()
            where T12 : new()
            where T13 : new()
            where T14 : new()
        {
            return GetParser<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>()
                .ParseAndValidate<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(args);
        }

        /// <summary>
        /// Gets a parser for the specified Command types
        /// </summary>
        /// <typeparam name="T1">The type of the T1.</typeparam>
        /// <typeparam name="T2">The type of the T2.</typeparam>
        /// <typeparam name="T3">The type of the T3.</typeparam>
        /// <typeparam name="T4">The type of the T4.</typeparam>
        /// <typeparam name="T5">The type of the T5.</typeparam>
        /// <typeparam name="T6">The type of the T6.</typeparam>
        /// <typeparam name="T7">The type of the T7.</typeparam>
        /// <typeparam name="T8">The type of the T8.</typeparam>
        /// <typeparam name="T9">The type of the T9.</typeparam>
        /// <typeparam name="T10">The type of the T10.</typeparam>
        /// <typeparam name="T11">The type of the T11.</typeparam>
        /// <typeparam name="T12">The type of the T12.</typeparam>
        /// <typeparam name="T13">The type of the T13.</typeparam>
        /// <typeparam name="T14">The type of the T14.</typeparam>
        /// <typeparam name="T15">The type of the T15.</typeparam>
        /// <returns>CommandLine.ParserResult&lt;System.Object&gt;.</returns>
        public static Parser GetParser<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>()
            where T1 : new()
            where T2 : new()
            where T3 : new()
            where T4 : new()
            where T5 : new()
            where T6 : new()
            where T7 : new()
            where T8 : new()
            where T9 : new()
            where T10 : new()
            where T11 : new()
            where T12 : new()
            where T13 : new()
            where T14 : new()
            where T15 : new()
        {
            return GetCustomisedParser(
                 ParserSettingsHelper.GetSettingsCustomiser<T1>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T2>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T3>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T4>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T5>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T6>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T7>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T8>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T9>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T10>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T11>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T12>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T13>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T14>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T15>()
                );
        }

        /// <summary>
        /// Gets a parser for the specified Command types and parses
        /// </summary>
        /// <typeparam name="T1">The type of the T1.</typeparam>
        /// <typeparam name="T2">The type of the T2.</typeparam>
        /// <typeparam name="T3">The type of the T3.</typeparam>
        /// <typeparam name="T4">The type of the T4.</typeparam>
        /// <typeparam name="T5">The type of the T5.</typeparam>
        /// <typeparam name="T6">The type of the T6.</typeparam>
        /// <typeparam name="T7">The type of the T7.</typeparam>
        /// <typeparam name="T8">The type of the T8.</typeparam>
        /// <typeparam name="T9">The type of the T9.</typeparam>
        /// <typeparam name="T10">The type of the T10.</typeparam>
        /// <typeparam name="T11">The type of the T11.</typeparam>
        /// <typeparam name="T12">The type of the T12.</typeparam>
        /// <typeparam name="T13">The type of the T13.</typeparam>
        /// <typeparam name="T14">The type of the T14.</typeparam>
        /// <typeparam name="T15">The type of the T15.</typeparam>
        public static IExtendedParserResult<object> GetParserAndParse<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(string[] args)
            where T1 : new()
            where T2 : new()
            where T3 : new()
            where T4 : new()
            where T5 : new()
            where T6 : new()
            where T7 : new()
            where T8 : new()
            where T9 : new()
            where T10 : new()
            where T11 : new()
            where T12 : new()
            where T13 : new()
            where T14 : new()
            where T15 : new()
        {
            return GetParser<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>()
                .ParseAndValidate<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(args);
        }

        /// <summary>
        /// Gets a parser for the specified Command types
        /// </summary>
        /// <typeparam name="T1">The type of the T1.</typeparam>
        /// <typeparam name="T2">The type of the T2.</typeparam>
        /// <typeparam name="T3">The type of the T3.</typeparam>
        /// <typeparam name="T4">The type of the T4.</typeparam>
        /// <typeparam name="T5">The type of the T5.</typeparam>
        /// <typeparam name="T6">The type of the T6.</typeparam>
        /// <typeparam name="T7">The type of the T7.</typeparam>
        /// <typeparam name="T8">The type of the T8.</typeparam>
        /// <typeparam name="T9">The type of the T9.</typeparam>
        /// <typeparam name="T10">The type of the T10.</typeparam>
        /// <typeparam name="T11">The type of the T11.</typeparam>
        /// <typeparam name="T12">The type of the T12.</typeparam>
        /// <typeparam name="T13">The type of the T13.</typeparam>
        /// <typeparam name="T14">The type of the T14.</typeparam>
        /// <typeparam name="T15">The type of the T15.</typeparam>
        /// <typeparam name="T16">The type of the T16.</typeparam>
        /// <returns>CommandLine.ParserResult&lt;System.Object&gt;.</returns>
        public static Parser GetParser<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>()
            where T1 : new()
            where T2 : new()
            where T3 : new()
            where T4 : new()
            where T5 : new()
            where T6 : new()
            where T7 : new()
            where T8 : new()
            where T9 : new()
            where T10 : new()
            where T11 : new()
            where T12 : new()
            where T13 : new()
            where T14 : new()
            where T15 : new()
            where T16 : new()
        {
            return GetCustomisedParser(
                 ParserSettingsHelper.GetSettingsCustomiser<T1>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T2>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T3>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T4>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T5>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T6>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T7>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T8>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T9>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T10>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T11>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T12>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T13>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T14>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T15>()
                ,ParserSettingsHelper.GetSettingsCustomiser<T16>()
                );
        }

        /// <summary>
        /// Gets a parser for the specified Command types and parses
        /// </summary>
        /// <typeparam name="T1">The type of the T1.</typeparam>
        /// <typeparam name="T2">The type of the T2.</typeparam>
        /// <typeparam name="T3">The type of the T3.</typeparam>
        /// <typeparam name="T4">The type of the T4.</typeparam>
        /// <typeparam name="T5">The type of the T5.</typeparam>
        /// <typeparam name="T6">The type of the T6.</typeparam>
        /// <typeparam name="T7">The type of the T7.</typeparam>
        /// <typeparam name="T8">The type of the T8.</typeparam>
        /// <typeparam name="T9">The type of the T9.</typeparam>
        /// <typeparam name="T10">The type of the T10.</typeparam>
        /// <typeparam name="T11">The type of the T11.</typeparam>
        /// <typeparam name="T12">The type of the T12.</typeparam>
        /// <typeparam name="T13">The type of the T13.</typeparam>
        /// <typeparam name="T14">The type of the T14.</typeparam>
        /// <typeparam name="T15">The type of the T15.</typeparam>
        /// <typeparam name="T16">The type of the T16.</typeparam>
        public static IExtendedParserResult<object> GetParserAndParse<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(string[] args)
            where T1 : new()
            where T2 : new()
            where T3 : new()
            where T4 : new()
            where T5 : new()
            where T6 : new()
            where T7 : new()
            where T8 : new()
            where T9 : new()
            where T10 : new()
            where T11 : new()
            where T12 : new()
            where T13 : new()
            where T14 : new()
            where T15 : new()
            where T16 : new()
        {
            return GetParser<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>()
                .ParseAndValidate<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(args);
        }
    }
}
