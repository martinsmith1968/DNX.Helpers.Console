<#@ template debug="false" hostspecific="True" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#
var types = Enumerable.Range(2, 15)
    .ToDictionary(e => e, e => Enumerable.Range(1, e).Select(i => string.Format("T{0}", i)));
#>
// Code generated by a Template
using System.Collections.Generic;
using CommandLine;

namespace DNX.Helpers.Console.CommandLine
{
    /// <summary>
    /// Class ParserVerbExtensions.
    /// </summary>
    public static class ParserExtensions
    {
        /// <summary>
        /// Parses the specified arguments.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="parser">The parser.</param>
        /// <param name="args">The arguments.</param>
        /// <returns>ParserResult&lt;T&gt;.</returns>
        public static ParserResult<T> ParseAndValidate<T>(this Parser parser, IEnumerable<string> args)
            where T : new()
        {
            var expandedArgs = args.Expand();

            var result = parser.ParseArguments<T>(expandedArgs);

            result.PostProcessResult();

            return result;
        }
<#
foreach (var kvp in types)
{
    var typeCount   = kvp.Key;
    var typeNumbers = kvp.Value;
    var typeList    = string.Join(", ", typeNumbers);
#>

        /// <summary>
        /// Parses the specified Command arguments.
        /// </summary>
<# foreach (var tn in typeNumbers) { #>
        /// <typeparam name="<#= tn #>">The type of the <#= tn #>.</typeparam>
<# } #>
        /// <param name="parser">The parser.</param>
        /// <param name="args">The arguments.</param>
        /// <returns>CommandLine.ParserResult&lt;System.Object&gt;.</returns>
        public static ParserResult<object> ParseAndValidate<<#= typeList #>>(this Parser parser, IEnumerable<string> args)
        {
            var expandedArgs = args.Expand();

            var result = parser.ParseArguments<<#= typeList #>>(expandedArgs);

            result.PostProcessResult();

            return result;
        }
<# } #>
    }
}
