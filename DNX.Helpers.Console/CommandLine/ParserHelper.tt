<#@ template debug="false" hostspecific="True" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#
var types = Enumerable.Range(2, 15)
    .ToDictionary(e => e, e => Enumerable.Range(1, e).Select(i => string.Format("T{0}", i)));
#>
// Code generated by a Template
using System;
using System.Collections.Generic;
using System.Linq;
using CommandLine;
using DNX.Helpers.Console.CommandLine.Results;

namespace DNX.Helpers.Console.CommandLine
{
    /// <summary>
    /// Class ParserManager.
    /// </summary>
    public static class ParserHelper
    {
        internal static Parser GetCustomisedParser(params Action<ParserSettings>[] customisers)
        {
			return GetCustomisedParser(customisers.ToList());
		}

		internal static Parser GetCustomisedParser(IList<Action<ParserSettings>> customisers)
		{
            var customiserList = new List<Action<ParserSettings>>
            {
                ParserSettingsHelper.DefaultParserCustomiser
            };

            customisers
                .Where(c => c != null)
                .ToList()
                .ForEach(c => customiserList.Add(c))
                ;

            var customiserChain = ParserSettingsChain.Create(customiserList);

            return new Parser(customiserChain);
        }

        /// <summary>
        /// Gets the default parser.
        /// </summary>
        /// <value>The default parser.</value>
        public static Parser DefaultParser
        {
            get
            {
                return GetCustomisedParser();
            }
        }

        /// <summary>
        /// Gets a parser for the specified Arguments type
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <returns>Parser.</returns>
        public static Parser GetParser<T>()
            where T : new()
        {
            return GetCustomisedParser(ParserSettingsHelper.GetSettingsCustomiser<T>());
        }

        /// <summary>
        /// Gets a parser for the specified Arguments type and parses
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="args">The arguments.</param>
        /// <returns>CommandLine.ParserResult&lt;T&gt;.</returns>
        public static IExtendedParserResult<T> GetParserAndParse<T>(string[] args)
            where T : new()
        {
            var parser = GetParser<T>();

            return parser.ParseAndValidate<T>(args);
        }

<#
foreach (var kvp in types)
{
    var typeCount   = kvp.Key;
    var typeNumbers = kvp.Value;
    var typeList    = string.Join(", ", typeNumbers);
#>

        /// <summary>
        /// Gets a parser for the specified Command types
        /// </summary>
<# foreach (var tn in typeNumbers) { #>
        /// <typeparam name="<#= tn #>">The type of the <#= tn #>.</typeparam>
<# } #>
        /// <returns>CommandLine.ParserResult&lt;System.Object&gt;.</returns>
        public static Parser GetParser<<#= typeList #>>()
<# foreach (var tn in typeNumbers) { #>
            where <#= tn #> : new()
<# } #>
        {
            return GetCustomisedParser(
<# foreach (var tn in typeNumbers) { var comma = tn.Equals("T1") ? " " : ","; #>
                <#= comma #>ParserSettingsHelper.GetSettingsCustomiser<<#= tn #>>()
<# } #>
                );
        }

        /// <summary>
        /// Gets a parser for the specified Command types and parses
        /// </summary>
<# foreach (var tn in typeNumbers) { #>
        /// <typeparam name="<#= tn #>">The type of the <#= tn #>.</typeparam>
<# } #>
        public static IExtendedParserResult<object> GetParserAndParse<<#= typeList #>>(string[] args)
<# foreach (var tn in typeNumbers) { #>
            where <#= tn #> : new()
<# } #>
        {
            return GetParser<<#= typeList #>>()
                .ParseAndValidate<<#= typeList #>>(args);
        }
<# } #>
    }
}
